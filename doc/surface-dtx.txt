Surface DTX Driver
================================================================================

Description: Driver documentation for clipboard detachment system.
Devices:     Surface Book 2.
Date:        2019-04-05


Warning: This documentation is outdated and in parts inaccurate.

The DTX driver is responsible for proper clipboard detachment and
re-attachment handling. To this end, it provides the `/dev/surface_dtx`
device, through which it can interface with a user-space daemon. This daemon
is then ultimately responsible for determining and taking necessary actions,
such as unmounting devices attached to the base, unloading/reloading the
grapics-driver, user-notifications, etc.

There are two basic communication principles used in this driver: Commands
(in other parts of the documentation also referred to as requests) and
events. Commands are sent to the EC and may have a different implications in
different contexts. Events are sent by the EC upon some internal state
change. Commands are always driver-initiated, whereas events are always
initiated by the EC.


Basics / Concepts / Nomenclature
--------------------------------------------------------------------------------

Clipboard:
    The detachable upper part of the Surface Book, housing the screen and
    CPU.

Base:
    The lower part of the Surface Book from which the clipboard can be
    detached, housing the discrete GPU (dGPU).

Latch:
    The mechanism keeping the clipboard attached to the base.

    The latch can be in one of three states, the default state is 'closed'.
    If the latch is closed, the clipboard is (or can be) securely attached
    to the base. If the latch is open, the clipboard can be detached from
    the base.

    Note that the latch is also closed when the clipboard is separated from
    the base. Putting them back together does not require the latch to be
    open.

    Furthermore, the latch can be locked. For transitions in and out of this
    state see command CIDs 0x06 and 0x07. If the latch is locked, any
    detachment process not confirmed with a latch-open (CID 0x09) or a latch
    unlock (CID 0x07) command will time out and not unlock and open the
    latch. If the latch is not locked (i.e. closed) and the detachment
    process times out, it will open automatically.

    During a detachment process, the LED on the detach-button will indicate
    if the latch is locked (red) or if it is open (green, flashing).

    The lock state is intended to as a measure to ensure that the base can
    not be detached as long as the dGPU contained in it is in use. This,
    however, is not automatically detected and enforced, but requires manual
    action by keeping track of applications using the dGPU and calling the
    afforementioned commands.

Silently ignored commands:
    The command is accepted by the EC as a valid command and acknowledged
    (following the standard communication protocol), but the EC does not act
    upon it.


Detachment Process
--------------------------------------------------------------------------------

The detachment process is started with the user pressing the "detach" button
on the base of the device, or sending the latch-request command (CID 0x08).
Following that:

 1. The EC turns on the indicator LED on the detach-button and sends a
    detach-request event and awaits further instructions/commands.

    The LED will be red if the latch is locked or flash green if it is
    unlocked (see 'Latch').

 2. The event is, via this driver, relayed to user-space, where an
    appropriate user-space daemon can handle the event and send instructions
    back to the EC.

    Valid responses are:

      - Send "latch-request" command (0x08). This will immediately abort the
        detachment process. Furthermore, the EC will send a detach-request
        event, similar to the user pressing the detach-button to cancel said
        process (see point 4).

      - Send "latch-open" command (0x09). This will open the latch, after
        which the user can separate clipboard and base.

        If the latch is locked and the dGPU is in use, the EC will
        immediately abort the detachment process and send a
        detach-button-pressed event, similar to the user pressing the
        detach-button to cancel said process (see point 4).

      - Send "latch-unlock" command (0x07). Provided the latch is locked,
        this will unlock and open the latch. No further "latch-open" command
        is required.

        If the latch is not locked, this command will be silently ignored.

      - Do nothing (see point 3).

    See Section "Commands" on the specification of these responses.

 3. The EC waits for instructions from user-space and acts according to them.

    If the EC does not receive any instructions in a given period, it will
    time out and continue as follows:

      - If the latch is unlocked, the EC will open the latch and the
        clipboard can be detached from the base. This is the exact behavior as
        without this driver or any user-space daemon.

      - If the latch is locked, the EC will _not_ open the latch, meaning
        the clipboard cannot be detached from the base. Furthermore, the EC
        sends an event detailing this (code 0x0f with errnum 0x02, see
        section "Events" for details).

 4. If the user presses the detach button at any point when a detach event
    is in process (i.e. after the the EC has sent the initial detach-request
    event and before it received the corresponding response), the detach
    process is cancled on the EC-level and an identical event is being sent.
    Thus a detach-request event, by itself, does not signal the start of the
    detachment process.

Further notes: It seems that the latch-lock is only taking effect when the
dGPU is actually powered on. Sending a latch-open command with locked latch
but dGPU powered-off unlocks and opens the latch.


Commands
--------------------------------------------------------------------------------

All commands below are standard Surface-EC commands with the following
properties except where stated otherwise:

    Field   Value   Note
    ------------------------------------------------------------------------
    TC      0x11
    IID     0x00
    CID     ....    See below.
    SNC     0x00    No return-package.
    CDL     0x00    No command payload.

Command-Codes/IDs:

    CID 0x06:
        Lock latch.

        Transfers the latch from 'closed' to 'locked' state. This command
        will be silently ignored if the latch has already been locked.

        Context:
            Valid only outside detachment-process (otherwise silently ignored).

    CID 0x07:
        Unlock latch.

        Transfers the latch from 'locked' to 'closed'/unlocked state. This
        command only unlocks the latch. It will not open the latch when sent
        during an ongoing detatchment process. It will be silently ignored
        if the lock is already unlocked/closed.

        Context:
            Valid in any context.

    CID 0x08:
        Generic latch request.

        Behavior depends on the context: If no detachment-process is active,
        detachment is requested. Otherwise the currently active
        detachment-process will be aborted.

        If a detachment process is canceled by this operation, a generic
        detachment request event (CID=0x06) will be sent.

        Context:
            Valid in any context, altough with different behavior.

    CID 0x09:
        Open latch / confirm latch open.

        Acknowledges and confirms a latch request. If sent, during an
        ongoing detachment process, this command causes the latch to be
        opened immediately. The latch will also be opened if it has been
        locked. In this case, the latch lock is reset to the unlocked state.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0a:
        Heartbeat for detachment in progress.

        Sends a heartbeat, essentially resetting the detachment timeout.
        This command can be used to keep the detachment process allive while
        work required for the detachment to succeed is still in progress.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0b:
        Cancel detachment.

        Cancels detachment in progress. If a detachment process is canceled
        by this operation, a generic detachment request event (CID=0x06)
        will be sent.

        Context:
            Valid only during detachment-process (otherwise silently ignored).

    CID 0x0d, SNC 0x01:
        Get device operation mode.

        Retunrs the device operation mode, indicating if and how the base is
        attached to the clipboard.

        Return: 1 byte.
            0x00: Tablet Mode (tablet detached)
            0x01: Laptop Mode (tablet attached normally)
            0x02: Studio Mode (tablet attached but reversed, no keyboard)


Events
--------------------------------------------------------------------------------

Similar to commands, TC is 0x11 and IID is 0x00.

Event Codes/IDs:

    CID 0x0c:
        Physical connection changed. This means real physical contact as in
        clipboard separated from / inserted into base.

        Payload: 2 bytes: [state, base].
            The `state` byte specifies the detach state, while the `base`
            byte specifies the base type.

            state:
                0x00:   detached (detach success)
                0x01:   attached
                0x02:   not feasible (detach with low battery)

            base:
                0x07:   Ur base
                0x0a:   ZOr base
                0x0d:   Ge base (additional checks/setup?)
                0x0e:   Ce base
                other:  no dGPU (or unknown?)

    CID 0x0e:
        Generic detach-request event. Depending on the context, can signal
        initiation or abortion of a detachment-process by a user.

        Payload: None

    CID 0x0f:
        Detachment canceled due to error.

        Payload: 1 byte.
            0x00:   Not feasible (detach with low battery).
            0x02:   The detachment-process timed out while the latch was
                    locked. The latch has not been opened.
            0x03:   Failed to unlock.
            0x04:   Failed to remain unlocked.
            0x05:   Failed to re-lock.

        Note: In this context unlocked/locked means open/close.

    CID 0x11:
        Latch status event. Signals change of the latch status, specifically
        when it has been opened or closed. This can be used to indicate to
        the user when the clipboard is ready to be separated from the base.

        Payload: 1 byte.
            0x00:   Latch locked.
            0x01:   Latch unlocked.
            0x02:   Failed to unlock.
            0x03:   Failed to remain unlocked.
            0x04:   Failed to re-lock.

        Note: In this context unlocked/locked means open/close.


User-Space API
--------------------------------------------------------------------------------

The user-space interface is provided via `/dev/surface_dtx`. This is a basic
`miscdevice`, from which events can be received via `read` / `poll` /
`select` / fasync, and to which commands can be sent via `ioctl`. Multiple
clients may access this file at the same time.

Event Structure:
    Events consist of four consecutive bytes:

        [type: u8, CID: u8, arg0: u8, arg1: u8]

    where `type` is currently fixed to `0x11`, `CID` is the event ID as
    described above, and `arg0` and `arg1` are the first and second byte of
    the event payload. If unused, `arg0` and `arg1` are set to zero.

Command IOCTLs:
    All IOCTLs have type 0x11.

    - Unlock latch (Nr. 0x01)
        no parameters

    - Lock latch (Nr. 0x02)
        no parameters

    - Latch request (Nr. 0x03)
        no parameters

    - Latch Open (Nr: 0x04)
        no parameters

    - Get Operation Mode (Nr: 0x05)
        Returns a single integer (int) containing the device operation mode
        as described in the 'Commands' section.

For extended descriptions and usage, see the 'Commands' and 'Detachment
Process' sections.
